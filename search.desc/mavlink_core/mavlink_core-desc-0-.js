searchState.loadedDescShard("mavlink_core", 0, "The MAVLink message set.\nMessage framing marker for mavlink v1\nMessage framing marker for mavlink v2\nA MAVLink connection\nEncapsulation of the Mavlink message and the header, …\nMetadata from a MAVLink packet header\nVersions of the Mavlink protocol that we support\nConnect to a MAVLink node by address string.\nDeserialize MavFrame from a slice that has been received …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the frame header\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis module implements a buffered/peekable reader.\nRead a MAVLink v1 message from a Read stream.\nReturn a raw buffer with the mavlink message V1 maximum …\nRead a MAVLink v2  message from a Read stream.\nReturn a raw buffer with the mavlink message V2 maximum …\nReceive a mavlink message.\nRead whole frame\nRead whole frame\nSend a mavlink message\nSend a message with default header\nSend a message with default header\nWrite whole frame\nWrite whole frame\nSerialize <strong>Message</strong> into byte slice and return count of …\nCreate a new frame with given message Serialize MavFrame …\nWrite a MAVLink v1 message to a Write stream.\nWrite a MAVLink v2 message to a Write stream.\nWrite a message using the given mavlink version\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA buffered/peekable reader\nConsumes a specified amount of bytes from the buffer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInstantiates a new <code>PeekReader</code>, wrapping the provided …\nPeeks an exact amount of bytes from the internal buffer\nReads a specified amount of bytes from the internal buffer\nReads a byte from the internal buffer\nReturns a mutable reference to the underlying <code>std::io::Read</code>…\nReturns an immutable reference to the underlying …\nRemoves the trailing zeroes in the payload")